# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NvfAYSoH73pmFJN-mB6CzLDN3Mm7xbQG
"""

import requests
from bs4 import BeautifulSoup
import re
import nltk
from nltk.tokenize import sent_tokenize

# Function to scrape text data from a Wikipedia page, preprocess it, and save it to a file
def scrape_wikipedia(url, output_file):
    # Send a GET request to the URL
    response = requests.get(url)

    # Parse the HTML content of the page
    soup = BeautifulSoup(response.content, "html.parser")

    # Find all the paragraphs on the page
    paragraphs = soup.find_all("p")

    # Extract the text from each paragraph and concatenate
    text = ""
    for paragraph in paragraphs:
        text += paragraph.text

    # Preprocess the text
    text = preprocess_text(text)

    # Tokenize the text into sentences
    sentences = sent_tokenize(text)

    # Save the preprocessed text to a file
    with open(output_file, "w") as f:
        for sentence in sentences:
            f.write(sentence + "\n")

# Function to preprocess the text
def preprocess_text(text):
    # Lowercase the text
    text = text.lower()

    # Remove special characters and extra whitespaces
    text = re.sub(r'[^\w\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()

    return text

# Define the URL of the Wikipedia page you want to crawl
url = "https://en.wikipedia.org/wiki/Main_Page"

# Define the output file
output_file = "wiki_corpus.txt"

# Scrape Wikipedia, preprocess the text, and save to the output file
scrape_wikipedia(url, output_file)

# Fine-tuning a pre-trained model for text generation

# Import necessary libraries
import tensorflow as tf
from transformers import TFGPT2LMHeadModel, GPT2Tokenizer

# Load the pre-trained model and tokenizer
model = TFGPT2LMHeadModel.from_pretrained('gpt2')
tokenizer = GPT2Tokenizer.from_pretrained('gpt2')

# Fine-tune the model on your dataset

# Save the fine-tuned model
model.save_pretrained("fine_tuned_gpt2")

train_dataset = TextDataset(
    tokenizer=tokenizer,
    file_path="your_training_file.txt",
    block_size=128,
)

data_collator = DataCollatorForLanguageModeling(
    tokenizer=tokenizer, mlm=False,
)

# Define the training arguments
training_args = TrainingArguments(
    output_dir="./fine_tuned_gpt2",
    overwrite_output_dir=True,
    num_train_epochs=3,
    per_device_train_batch_size=4,
    save_steps=10_000,
    save_total_limit=2,
)

# Create a Trainer and fine-tune the model
trainer = Trainer(
    model=model,
    args=training_args,
    data_collator=data_collator,
    train_dataset=train_dataset,
)

trainer.train()

# Save the fine-tuned model
model.save_pretrained("fine_tuned_gpt2")